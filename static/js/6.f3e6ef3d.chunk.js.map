{"version":3,"sources":["places/pages/NewPlace.js"],"names":["NewPlace","auth","useContext","AuthContext","useHttp","isLoading","error","sendRequest","errorHandler","useForm","title","value","isValid","description","address","image","lat","lng","formState","inputHandler","history","useHistory","submitHandler","event","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","push","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled"],"mappings":"uiNAsIeA,UArHE,WACf,IAAMC,EAAOC,qBAAWC,KACxB,EAAwDC,cAAhDC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,aACvC,EAAkCC,YAChC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,QAAS,CACPH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,MAAO,KACPC,SAAS,GAEXI,IAAK,CACHL,MAAO,GACPC,SAAS,GAEXK,IAAK,CACHN,MAAO,GACPC,SAAS,KAGb,GA3BF,mBAAOM,EAAP,KAAkBC,EAAlB,KA8BMC,EAAUC,cAEVC,EAAa,uCAAG,WAAOC,GAAP,8EACpBA,EAAMC,kBACAC,EAAW,IAAIC,UACZC,OAAO,QAAST,EAAUU,OAAOlB,MAAMC,OAChDc,EAASE,OAAO,cAAeT,EAAUU,OAAOf,YAAYF,OAC5Dc,EAASE,OAAO,UAAWT,EAAUU,OAAOd,QAAQH,OACpDc,EAASE,OAAO,MAAOT,EAAUU,OAAOZ,IAAIL,OAC5Cc,EAASE,OAAO,MAAOT,EAAUU,OAAOX,IAAIN,OAC5Cc,EAASE,OAAO,UAAW1B,EAAK4B,QAChCJ,EAASE,OAAO,QAAST,EAAUU,OAAOb,MAAMJ,OAT5B,mBAWZJ,EACJuB,oDACA,OACAL,EACA,CACEM,cAAe,UAAY9B,EAAK+B,QAhBlB,QAmBlBZ,EAAQa,KAAR,WAAiBhC,EAAK4B,OAAtB,YAnBkB,4GAAH,sDAuBnB,OACE,oCACE,kBAAC,IAAD,CAAYvB,MAAOA,EAAO4B,QAAS1B,IACnC,0BAAM2B,UAAU,aAAaC,SAAUd,GACpCjB,GAAa,kBAAC,IAAD,CAAgBgC,WAAS,IACvC,kBAAC,IAAD,CACEC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS1B,IAEX,kBAAC,IAAD,CACEmB,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACI,YAAoB,IACjCF,UAAU,4DACVC,QAAS1B,IAEX,kBAAC,IAAD,CACEmB,GAAG,UACHC,QAAQ,WACRE,MAAM,UACNC,WAAY,CAACC,eACbC,UAAU,gCACVC,QAAS1B,IAEX,kBAAC,IAAD,CACEmB,GAAG,QACHO,QAAS1B,EACTyB,UAAU,oDAEZ,kBAAC,IAAD,CACEN,GAAG,MACHC,QAAQ,QACRE,MAAM,WACNC,WAAY,CAACC,eACbC,UAAU,iCACVC,QAAS1B,IAEX,kBAAC,IAAD,CACEmB,GAAG,MACHC,QAAQ,QACRE,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,kCACVC,QAAS1B,IAEX,kBAAC,IAAD,CAAQqB,KAAK,SAASO,UAAW7B,EAAUN,SAA3C","file":"static/js/6.f3e6ef3d.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input/Input\";\nimport Button from \"../../shared/components/FormElements/Button/Button\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport ErrorModal from \"../../shared/components/UIElements/Loading/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/Loading/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload/ImageUpload\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/utils/validators\";\nimport \"./Place.css\";\nimport { useForm } from \"../../shared/hooks/useForm\";\nimport { useHttp } from \"../../shared/hooks/useHttp\";\n\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, errorHandler } = useHttp();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      address: {\n        value: \"\",\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n      lat: {\n        value: \"\",\n        isValid: false,\n      },\n      lng: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const history = useHistory();\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append(\"title\", formState.inputs.title.value);\n    formData.append(\"description\", formState.inputs.description.value);\n    formData.append(\"address\", formState.inputs.address.value);\n    formData.append(\"lat\", formState.inputs.lat.value);\n    formData.append(\"lng\", formState.inputs.lng.value);\n    formData.append(\"creator\", auth.userId);\n    formData.append(\"image\", formState.inputs.image.value);\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + \"/places\",\n        \"POST\",\n        formData,\n        {\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      history.push(`/${auth.userId}/places`);\n    } catch (err) {}\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={errorHandler} />\n      <form className=\"place-form\" onSubmit={submitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (at least 5 characters).\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"textarea\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address.\"\n          onInput={inputHandler}\n        />\n        <ImageUpload\n          id=\"image\"\n          onInput={inputHandler}\n          errorText=\"Please choose valid file (*.jpg, *.png, *.jpeg)\"\n        />\n        <Input\n          id=\"lat\"\n          element=\"input\"\n          label=\"Latitude\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid Latitude.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"lng\"\n          element=\"input\"\n          label=\"Longitude\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid Longitude.\"\n          onInput={inputHandler}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default NewPlace;\n"],"sourceRoot":""}